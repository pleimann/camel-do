// Code generated by go-enum DO NOT EDIT.
// Version: 0.6.0
// Revision: 919e61c0174b91303753ee3898569a01abb32c97
// Build Date: 2023-12-18T15:54:43Z
// Built By: goreleaser

package model

import (
	"fmt"
	"strings"
)

const (
	// ColorRed is a Color of type Red.
	ColorRed Color = "Red"
	// ColorOrange is a Color of type Orange.
	ColorOrange Color = "Orange"
	// ColorAmber is a Color of type Amber.
	ColorAmber Color = "Amber"
	// ColorYellow is a Color of type Yellow.
	ColorYellow Color = "Yellow"
	// ColorLime is a Color of type Lime.
	ColorLime Color = "Lime"
	// ColorGreen is a Color of type Green.
	ColorGreen Color = "Green"
	// ColorEmerald is a Color of type Emerald.
	ColorEmerald Color = "Emerald"
	// ColorTeal is a Color of type Teal.
	ColorTeal Color = "Teal"
	// ColorCyan is a Color of type Cyan.
	ColorCyan Color = "Cyan"
	// ColorSky is a Color of type Sky.
	ColorSky Color = "Sky"
	// ColorViolet is a Color of type Violet.
	ColorViolet Color = "Violet"
	// ColorPurple is a Color of type Purple.
	ColorPurple Color = "Purple"
	// ColorFuchsia is a Color of type Fuchsia.
	ColorFuchsia Color = "Fuchsia"
	// ColorPink is a Color of type Pink.
	ColorPink Color = "Pink"
	// ColorRose is a Color of type Rose.
	ColorRose Color = "Rose"
)

var ErrInvalidColor = fmt.Errorf("not a valid Color, try [%s]", strings.Join(_ColorNames, ", "))

var _ColorNames = []string{
	string(ColorRed),
	string(ColorOrange),
	string(ColorAmber),
	string(ColorYellow),
	string(ColorLime),
	string(ColorGreen),
	string(ColorEmerald),
	string(ColorTeal),
	string(ColorCyan),
	string(ColorSky),
	string(ColorViolet),
	string(ColorPurple),
	string(ColorFuchsia),
	string(ColorPink),
	string(ColorRose),
}

// ColorNames returns a list of possible string values of Color.
func ColorNames() []string {
	tmp := make([]string, len(_ColorNames))
	copy(tmp, _ColorNames)
	return tmp
}

// ColorValues returns a list of the values for Color
func ColorValues() []Color {
	return []Color{
		ColorRed,
		ColorOrange,
		ColorAmber,
		ColorYellow,
		ColorLime,
		ColorGreen,
		ColorEmerald,
		ColorTeal,
		ColorCyan,
		ColorSky,
		ColorViolet,
		ColorPurple,
		ColorFuchsia,
		ColorPink,
		ColorRose,
	}
}

// String implements the Stringer interface.
func (x Color) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x Color) IsValid() bool {
	_, err := ParseColor(string(x))
	return err == nil
}

var _ColorValue = map[string]Color{
	"Red":     ColorRed,
	"Orange":  ColorOrange,
	"Amber":   ColorAmber,
	"Yellow":  ColorYellow,
	"Lime":    ColorLime,
	"Green":   ColorGreen,
	"Emerald": ColorEmerald,
	"Teal":    ColorTeal,
	"Cyan":    ColorCyan,
	"Sky":     ColorSky,
	"Violet":  ColorViolet,
	"Purple":  ColorPurple,
	"Fuchsia": ColorFuchsia,
	"Pink":    ColorPink,
	"Rose":    ColorRose,
}

// ParseColor attempts to convert a string to a Color.
func ParseColor(name string) (Color, error) {
	if x, ok := _ColorValue[name]; ok {
		return x, nil
	}
	return Color(""), fmt.Errorf("%s is %w", name, ErrInvalidColor)
}

// MarshalText implements the text marshaller method.
func (x Color) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *Color) UnmarshalText(text []byte) error {
	tmp, err := ParseColor(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
