// Code generated by "go-enum -type=Color"; DO NOT EDIT.

// Install go-enum by `go get install github.com/searKing/golang/tools/go-enum`
package model

import (
	"database/sql"
	"database/sql/driver"
	"encoding"
	"encoding/json"
	"fmt"
	"strconv"
)

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[Zinc-0]
	_ = x[Red-1]
	_ = x[Orange-2]
	_ = x[Amber-3]
	_ = x[Yellow-4]
	_ = x[Lime-5]
	_ = x[Green-6]
	_ = x[Emerald-7]
	_ = x[Teal-8]
	_ = x[Cyan-9]
	_ = x[Sky-10]
	_ = x[Violet-11]
	_ = x[Purple-12]
	_ = x[Fuchsia-13]
	_ = x[Pink-14]
	_ = x[Rose-15]
}

const _Color_name = "ZincRedOrangeAmberYellowLimeGreenEmeraldTealCyanSkyVioletPurpleFuchsiaPinkRose"

var _Color_index = [...]uint8{0, 4, 7, 13, 18, 24, 28, 33, 40, 44, 48, 51, 57, 63, 70, 74, 78}

func _() {
	var _nil_Color_value = func() (val Color) { return }()

	// An "cannot convert Color literal (type Color) to type fmt.Stringer" compiler error signifies that the base type have changed.
	// Re-run the go-enum command to generate them again.
	var _ fmt.Stringer = _nil_Color_value
}

func (i Color) String() string {
	if i < 0 || i >= Color(len(_Color_index)-1) {
		return "Color(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Color_name[_Color_index[i]:_Color_index[i+1]]
}

// New returns a pointer to a new addr filled with the Color value passed in.
func (i Color) New() *Color {
	clone := i
	return &clone
}

var _Color_values = []Color{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}

var _Color_name_to_values = map[string]Color{
	_Color_name[0:4]:   0,
	_Color_name[4:7]:   1,
	_Color_name[7:13]:  2,
	_Color_name[13:18]: 3,
	_Color_name[18:24]: 4,
	_Color_name[24:28]: 5,
	_Color_name[28:33]: 6,
	_Color_name[33:40]: 7,
	_Color_name[40:44]: 8,
	_Color_name[44:48]: 9,
	_Color_name[48:51]: 10,
	_Color_name[51:57]: 11,
	_Color_name[57:63]: 12,
	_Color_name[63:70]: 13,
	_Color_name[70:74]: 14,
	_Color_name[74:78]: 15,
}

// ParseColorString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ParseColorString(s string) (Color, error) {
	if val, ok := _Color_name_to_values[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Color values", s)
}

// ColorValues returns all values of the enum
func ColorValues() []Color {
	return _Color_values
}

// IsAColor returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Color) Registered() bool {
	for _, v := range _Color_values {
		if i == v {
			return true
		}
	}
	return false
}

func _() {
	var _nil_Color_value = func() (val Color) { return }()

	// An "cannot convert Color literal (type Color) to type encoding.BinaryMarshaler" compiler error signifies that the base type have changed.
	// Re-run the go-enum command to generate them again.
	var _ encoding.BinaryMarshaler = &_nil_Color_value

	// An "cannot convert Color literal (type Color) to type encoding.BinaryUnmarshaler" compiler error signifies that the base type have changed.
	// Re-run the go-enum command to generate them again.
	var _ encoding.BinaryUnmarshaler = &_nil_Color_value
}

// MarshalBinary implements the encoding.BinaryMarshaler interface for Color
func (i Color) MarshalBinary() (data []byte, err error) {
	return []byte(i.String()), nil
}

// UnmarshalBinary implements the encoding.BinaryUnmarshaler interface for Color
func (i *Color) UnmarshalBinary(data []byte) error {
	var err error
	*i, err = ParseColorString(string(data))
	return err
}

func _() {
	var _nil_Color_value = func() (val Color) { return }()

	// An "cannot convert Color literal (type Color) to type json.Marshaler" compiler error signifies that the base type have changed.
	// Re-run the go-enum command to generate them again.
	var _ json.Marshaler = _nil_Color_value

	// An "cannot convert Color literal (type Color) to type encoding.Unmarshaler" compiler error signifies that the base type have changed.
	// Re-run the go-enum command to generate them again.
	var _ json.Unmarshaler = &_nil_Color_value
}

// MarshalJSON implements the json.Marshaler interface for Color
func (i Color) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Color
func (i *Color) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Color should be a string, got %s", data)
	}

	var err error
	*i, err = ParseColorString(s)
	return err
}

func _() {
	var _nil_Color_value = func() (val Color) { return }()

	// An "cannot convert Color literal (type Color) to type encoding.TextMarshaler" compiler error signifies that the base type have changed.
	// Re-run the go-enum command to generate them again.
	var _ encoding.TextMarshaler = _nil_Color_value

	// An "cannot convert Color literal (type Color) to type encoding.TextUnmarshaler" compiler error signifies that the base type have changed.
	// Re-run the go-enum command to generate them again.
	var _ encoding.TextUnmarshaler = &_nil_Color_value
}

// MarshalText implements the encoding.TextMarshaler interface for Color
func (i Color) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for Color
func (i *Color) UnmarshalText(text []byte) error {
	var err error
	*i, err = ParseColorString(string(text))
	return err
}

//func _() {
//	var _nil_Color_value = func() (val Color) { return }()
//
//	// An "cannot convert Color literal (type Color) to type yaml.Marshaler" compiler error signifies that the base type have changed.
//	// Re-run the go-enum command to generate them again.
//	var _ yaml.Marshaler = _nil_Color_value
//
//	// An "cannot convert Color literal (type Color) to type yaml.Unmarshaler" compiler error signifies that the base type have changed.
//	// Re-run the go-enum command to generate them again.
//	var _ yaml.Unmarshaler = &_nil_Color_value
//}

// MarshalYAML implements a YAML Marshaler for Color
func (i Color) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for Color
func (i *Color) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = ParseColorString(s)
	return err
}

func _() {
	var _nil_Color_value = func() (val Color) { return }()

	// An "cannot convert Color literal (type Color) to type driver.Valuer" compiler error signifies that the base type have changed.
	// Re-run the go-enum command to generate them again.
	var _ driver.Valuer = _nil_Color_value

	// An "cannot convert Color literal (type Color) to type sql.Scanner" compiler error signifies that the base type have changed.
	// Re-run the go-enum command to generate them again.
	var _ sql.Scanner = &_nil_Color_value
}

func (i Color) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *Color) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	str, ok := value.(string)
	if !ok {
		bytes, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("value is not a byte slice")
		}

		str = string(bytes[:])
	}

	val, err := ParseColorString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}

// ColorSliceContains reports whether sunEnums is within enums.
func ColorSliceContains(enums []Color, sunEnums ...Color) bool {
	var seenEnums = map[Color]bool{}
	for _, e := range sunEnums {
		seenEnums[e] = false
	}

	for _, v := range enums {
		if _, has := seenEnums[v]; has {
			seenEnums[v] = true
		}
	}

	for _, seen := range seenEnums {
		if !seen {
			return false
		}
	}

	return true
}

// ColorSliceContainsAny reports whether any sunEnum is within enums.
func ColorSliceContainsAny(enums []Color, sunEnums ...Color) bool {
	var seenEnums = map[Color]struct{}{}
	for _, e := range sunEnums {
		seenEnums[e] = struct{}{}
	}

	for _, v := range enums {
		if _, has := seenEnums[v]; has {
			return true
		}
	}

	return false
}
