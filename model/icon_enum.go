// Code generated by go-enum DO NOT EDIT.
// Version: 0.6.0
// Revision: 919e61c0174b91303753ee3898569a01abb32c97
// Build Date: 2023-12-18T15:54:43Z
// Built By: goreleaser

package model

import (
	"fmt"
	"strings"
)

const (
	// IconCat is a Icon of type Cat.
	IconCat Icon = "Cat"
	// IconDog is a Icon of type Dog.
	IconDog Icon = "Dog"
	// IconRabbit is a Icon of type Rabbit.
	IconRabbit Icon = "Rabbit"
	// IconSnail is a Icon of type Snail.
	IconSnail Icon = "Snail"
	// IconSquirrel is a Icon of type Squirrel.
	IconSquirrel Icon = "Squirrel"
	// IconTurtle is a Icon of type Turtle.
	IconTurtle Icon = "Turtle"
	// IconBird is a Icon of type Bird.
	IconBird Icon = "Bird"
	// IconBug is a Icon of type Bug.
	IconBug Icon = "Bug"
	// IconFish is a Icon of type Fish.
	IconFish Icon = "Fish"
	// IconRat is a Icon of type Rat.
	IconRat Icon = "Rat"
	// IconWorm is a Icon of type Worm.
	IconWorm Icon = "Worm"
)

var ErrInvalidIcon = fmt.Errorf("not a valid Icon, try [%s]", strings.Join(_IconNames, ", "))

var _IconNames = []string{
	string(IconCat),
	string(IconDog),
	string(IconRabbit),
	string(IconSnail),
	string(IconSquirrel),
	string(IconTurtle),
	string(IconBird),
	string(IconBug),
	string(IconFish),
	string(IconRat),
	string(IconWorm),
}

// IconNames returns a list of possible string values of Icon.
func IconNames() []string {
	tmp := make([]string, len(_IconNames))
	copy(tmp, _IconNames)
	return tmp
}

// IconValues returns a list of the values for Icon
func IconValues() []Icon {
	return []Icon{
		IconCat,
		IconDog,
		IconRabbit,
		IconSnail,
		IconSquirrel,
		IconTurtle,
		IconBird,
		IconBug,
		IconFish,
		IconRat,
		IconWorm,
	}
}

// String implements the Stringer interface.
func (x Icon) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x Icon) IsValid() bool {
	_, err := ParseIcon(string(x))
	return err == nil
}

var _IconValue = map[string]Icon{
	"Cat":      IconCat,
	"Dog":      IconDog,
	"Rabbit":   IconRabbit,
	"Snail":    IconSnail,
	"Squirrel": IconSquirrel,
	"Turtle":   IconTurtle,
	"Bird":     IconBird,
	"Bug":      IconBug,
	"Fish":     IconFish,
	"Rat":      IconRat,
	"Worm":     IconWorm,
}

// ParseIcon attempts to convert a string to a Icon.
func ParseIcon(name string) (Icon, error) {
	if x, ok := _IconValue[name]; ok {
		return x, nil
	}
	return Icon(""), fmt.Errorf("%s is %w", name, ErrInvalidIcon)
}

// MarshalText implements the text marshaller method.
func (x Icon) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *Icon) UnmarshalText(text []byte) error {
	tmp, err := ParseIcon(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
