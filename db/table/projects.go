//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var Projects = newProjectsTable("", "projects", "")

type projectsTable struct {
	sqlite.Table

	// Columns
	ID        sqlite.ColumnString
	CreatedAt sqlite.ColumnTimestamp
	UpdatedAt sqlite.ColumnTimestamp
	Name      sqlite.ColumnString
	Color     sqlite.ColumnString
	Icon      sqlite.ColumnString

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
	DefaultColumns sqlite.ColumnList
}

type ProjectsTable struct {
	projectsTable

	EXCLUDED projectsTable
}

// AS creates new ProjectsTable with assigned alias
func (a ProjectsTable) AS(alias string) *ProjectsTable {
	return newProjectsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ProjectsTable with assigned schema name
func (a ProjectsTable) FromSchema(schemaName string) *ProjectsTable {
	return newProjectsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ProjectsTable with assigned table prefix
func (a ProjectsTable) WithPrefix(prefix string) *ProjectsTable {
	return newProjectsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ProjectsTable with assigned table suffix
func (a ProjectsTable) WithSuffix(suffix string) *ProjectsTable {
	return newProjectsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newProjectsTable(schemaName, tableName, alias string) *ProjectsTable {
	return &ProjectsTable{
		projectsTable: newProjectsTableImpl(schemaName, tableName, alias),
		EXCLUDED:      newProjectsTableImpl("", "excluded", ""),
	}
}

func newProjectsTableImpl(schemaName, tableName, alias string) projectsTable {
	var (
		IDColumn        = sqlite.StringColumn("id")
		CreatedAtColumn = sqlite.TimestampColumn("created_at")
		UpdatedAtColumn = sqlite.TimestampColumn("updated_at")
		NameColumn      = sqlite.StringColumn("name")
		ColorColumn     = sqlite.StringColumn("color")
		IconColumn      = sqlite.StringColumn("icon")
		allColumns      = sqlite.ColumnList{IDColumn, CreatedAtColumn, UpdatedAtColumn, NameColumn, ColorColumn, IconColumn}
		mutableColumns  = sqlite.ColumnList{CreatedAtColumn, UpdatedAtColumn, NameColumn, ColorColumn, IconColumn}
		defaultColumns  = sqlite.ColumnList{ColorColumn, IconColumn}
	)

	return projectsTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		CreatedAt: CreatedAtColumn,
		UpdatedAt: UpdatedAtColumn,
		Name:      NameColumn,
		Color:     ColorColumn,
		Icon:      IconColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
