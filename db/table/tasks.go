//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var Tasks = newTasksTable("", "tasks", "")

type tasksTable struct {
	sqlite.Table

	// Columns
	ID          sqlite.ColumnString
	CreatedAt   sqlite.ColumnTimestamp
	UpdatedAt   sqlite.ColumnTimestamp
	Title       sqlite.ColumnString
	Description sqlite.ColumnString
	StartTime   sqlite.ColumnTimestamp
	Duration    sqlite.ColumnInteger
	Completed   sqlite.ColumnBool
	Rank        sqlite.ColumnInteger
	ProjectID   sqlite.ColumnString
	GTaskID     sqlite.ColumnString

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
	DefaultColumns sqlite.ColumnList
}

type TasksTable struct {
	tasksTable

	EXCLUDED tasksTable
}

// AS creates new TasksTable with assigned alias
func (a TasksTable) AS(alias string) *TasksTable {
	return newTasksTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new TasksTable with assigned schema name
func (a TasksTable) FromSchema(schemaName string) *TasksTable {
	return newTasksTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new TasksTable with assigned table prefix
func (a TasksTable) WithPrefix(prefix string) *TasksTable {
	return newTasksTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new TasksTable with assigned table suffix
func (a TasksTable) WithSuffix(suffix string) *TasksTable {
	return newTasksTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newTasksTable(schemaName, tableName, alias string) *TasksTable {
	return &TasksTable{
		tasksTable: newTasksTableImpl(schemaName, tableName, alias),
		EXCLUDED:   newTasksTableImpl("", "excluded", ""),
	}
}

func newTasksTableImpl(schemaName, tableName, alias string) tasksTable {
	var (
		IDColumn          = sqlite.StringColumn("id")
		CreatedAtColumn   = sqlite.TimestampColumn("created_at")
		UpdatedAtColumn   = sqlite.TimestampColumn("updated_at")
		TitleColumn       = sqlite.StringColumn("title")
		DescriptionColumn = sqlite.StringColumn("description")
		StartTimeColumn   = sqlite.TimestampColumn("start_time")
		DurationColumn    = sqlite.IntegerColumn("duration")
		CompletedColumn   = sqlite.BoolColumn("completed")
		RankColumn        = sqlite.IntegerColumn("rank")
		ProjectIDColumn   = sqlite.StringColumn("project_id")
		GTaskIDColumn     = sqlite.StringColumn("g_task_id")
		allColumns        = sqlite.ColumnList{IDColumn, CreatedAtColumn, UpdatedAtColumn, TitleColumn, DescriptionColumn, StartTimeColumn, DurationColumn, CompletedColumn, RankColumn, ProjectIDColumn, GTaskIDColumn}
		mutableColumns    = sqlite.ColumnList{CreatedAtColumn, UpdatedAtColumn, TitleColumn, DescriptionColumn, StartTimeColumn, DurationColumn, CompletedColumn, RankColumn, ProjectIDColumn, GTaskIDColumn}
		defaultColumns    = sqlite.ColumnList{DurationColumn}
	)

	return tasksTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		CreatedAt:   CreatedAtColumn,
		UpdatedAt:   UpdatedAtColumn,
		Title:       TitleColumn,
		Description: DescriptionColumn,
		StartTime:   StartTimeColumn,
		Duration:    DurationColumn,
		Completed:   CompletedColumn,
		Rank:        RankColumn,
		ProjectID:   ProjectIDColumn,
		GTaskID:     GTaskIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
