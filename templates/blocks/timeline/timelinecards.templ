package timeline

import (
	"fmt"
	"github.com/pleimann/camel-do/model"
	"github.com/pleimann/camel-do/templates/components"
	"math"
	"strings"
	"time"
)

// calculateTimePosition calculates precise grid position for a task/event
func calculateTimePosition(startTime time.Time, duration int32, config *TimelineConfig) (slot int, span int) {
	startHour := config.StartHour
	slotMins := config.SlotMinutes

	// Convert to local timezone for display
	localTime := startTime.Local()
	
	// Calculate total minutes from timeline start
	startMinutes := (localTime.Hour()-startHour)*60 + localTime.Minute()

	// Calculate slot position (1-based for CSS grid)
	slot = (startMinutes / slotMins) + 1

	// Calculate span based on duration
	durationMins := int(duration)
	if durationMins < slotMins {
		durationMins = slotMins // Minimum span of 1 slot
	}
	span = int(math.Ceil(float64(durationMins) / float64(slotMins)))

	return slot, span
}

// calculateEndTime calculates the end time of a task/event
func calculateEndTime(startTime time.Time, duration int32) time.Time {
	return startTime.Add(time.Duration(duration) * time.Minute)
}

// formatTimeRange formats start and end time for display
func formatTimeRange(startTime time.Time, duration int32) string {
	endTime := calculateEndTime(startTime, duration)
	
	// Convert to local timezone for display
	localStartTime := startTime.Local()
	localEndTime := endTime.Local()

	return fmt.Sprintf("%s - %s",
		localStartTime.Format("15:04"),
		localEndTime.Format("15:04"))
}

// formatDuration formats duration in human-readable format
func formatDuration(duration int32) string {
	if duration < 60 {
		return fmt.Sprintf("%dm", duration)
	}

	hours := duration / 60
	minutes := duration % 60
	if minutes == 0 {
		return fmt.Sprintf("%dh", hours)
	}
	
    return fmt.Sprintf("%dh %dm", hours, minutes)
}

templ timelineTaskCard(task model.Task, taskItem TimelineItem, projects *model.ProjectIndex, config *TimelineConfig) {
	{{
        project := projects.Get(task.ProjectID.String)
        color := strings.ToLower(project.Color.String())
        slot, span := calculateTimePosition(task.StartTime.Time, task.Duration.Int32, config)

        position := map[string]string{
            "grid-row":    fmt.Sprintf("%d / span %d", slot, span),
            "grid-column": fmt.Sprintf("%d / span %d", 3+taskItem.Column, taskItem.Span),
            "max-height":  fmt.Sprintf("%.1frem", 3 * float64(span) * config.ZoomLevel),
        }

        taskBarId := fmt.Sprintf("task-bar-%s", task.ID)
	}}

    // Enhanced task card with detailed time information and context menu
    <div
        id={ taskBarId }
        class={
            "h-full", "flex", "items-start", "rounded-xl", "cursor-pointer", "border", "relative",
            fmt.Sprintf("bg-%s-200", color), fmt.Sprintf("text-%s-800", color), fmt.Sprintf("border-%s-800", color),
        }
        style={ position }
        x-data="{ showContextMenu: false }"
        @click.away="showContextMenu = false"
    >
        <div 
            class="p-2 relative"
            @contextmenu.prevent="showContextMenu = !showContextMenu"
        >
            @components.Icon(project.Icon, 8)
            
            <!-- Context Menu -->
            <div 
                x-show="showContextMenu"
                x-transition:enter="transition ease-out duration-100"
                x-transition:enter-start="transform opacity-0 scale-95"
                x-transition:enter-end="transform opacity-100 scale-100"
                x-transition:leave="transition ease-in duration-75"
                x-transition:leave-start="transform opacity-100 scale-100"
                x-transition:leave-end="transform opacity-0 scale-95"
                class="absolute left-0 top-8 mt-1 w-32 bg-base-100 rounded-md shadow-lg border border-base-300 z-50"
                @click.stop
            >
                <div class="py-1">
                    <button
                        class="w-full text-left px-3 py-2 text-sm text-base-content hover:bg-base-200 flex items-center gap-2"
                        hx-delete={ fmt.Sprintf("/tasks/%s/schedule", task.ID) }
                        hx-target={ fmt.Sprintf("#%s", taskBarId) }
                        hx-swap="delete"
                        @click="showContextMenu = false"
                    >
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                        </svg>
                        Unschedule
                    </button>
                </div>
            </div>
        </div>
        <div class="p-1 grow">
            <div class="font-medium truncate">{ task.Title.String }</div>
            <div class="text-xs opacity-75">
                { fmt.Sprintf("%s (%s)", task.StartTime.Time.Local().Format("15:04"), formatDuration(task.Duration.Int32)) }
            </div>
        </div>
    </div>
}

templ timelineEventCard(event model.Event, eventItem TimelineItem, projects *model.ProjectIndex, config *TimelineConfig) {
	{{
        project := projects.Get(event.ProjectID.String)
        color := strings.ToLower(project.Color.String())
        slot, span := calculateTimePosition(event.StartTime.Time, event.Duration.Int32, config)

        position := map[string]string{
            "grid-row":    fmt.Sprintf("%d / span %d", slot, span),
            "grid-column": fmt.Sprintf("%d / span %d", 3+eventItem.Column, eventItem.Span),
            "max-height":  fmt.Sprintf("%.1frem", 3*float64(span)*config.ZoomLevel),
        }
	}}

    // Enhanced event card with detailed time information and context menu
    <div
        id={ fmt.Sprintf("event-bar-%s", event.ID) }
        class={
            "h-full", "flex", "items-start", "rounded-xl", "cursor-pointer", "border", "relative",
            fmt.Sprintf("bg-%s-200", color), fmt.Sprintf("text-%s-800", color), fmt.Sprintf("border-%s-800", color),
        }
        style={ position }
        x-data="{ showContextMenu: false }"
        @click.away="showContextMenu = false"
    >
        <div 
            class="p-2 relative"
            @contextmenu.prevent="showContextMenu = !showContextMenu"
        >
            @components.Icon(project.Icon, 8)
            
            <!-- Context Menu -->
            <div 
                x-show="showContextMenu"
                x-transition:enter="transition ease-out duration-100"
                x-transition:enter-start="transform opacity-0 scale-95"
                x-transition:enter-end="transform opacity-100 scale-100"
                x-transition:leave="transition ease-in duration-75"
                x-transition:leave-start="transform opacity-100 scale-100"
                x-transition:leave-end="transform opacity-0 scale-95"
                class="absolute left-0 top-8 mt-1 w-36 bg-base-100 rounded-md shadow-lg border border-base-300 z-50"
                @click.stop
            >
                <div class="py-1">
                    <button
                        class="w-full text-left px-3 py-2 text-sm text-base-content/50 flex items-center gap-2 cursor-not-allowed"
                        disabled
                        title="Calendar events cannot be unscheduled"
                    >
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                        </svg>
                        Unschedule
                    </button>
                </div>
            </div>
        </div>
        <div class="p-1 grow">
            <div class="font-medium truncate">{ event.Title.String }</div>
            <div class="text-xs opacity-75">
                { fmt.Sprintf("%s (%s)", event.StartTime.Time.Local().Format("15:04"), formatDuration(event.Duration.Int32)) }
            </div>
        </div>
    </div>
}
