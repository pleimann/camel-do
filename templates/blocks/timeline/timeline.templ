package timeline

import (
	"fmt"
	"github.com/pleimann/camel-do/model"
	"github.com/pleimann/camel-do/templates/components"
	"strings"
	"time"
)

var startHours = 6
var endHours = 24
var slotMinutes = 15

func taskPosition(task model.Task) map[string]string {
	row := task.Position.Slot
	spanRows := task.Position.Size

	return map[string]string{
		"grid-row":    fmt.Sprintf(" %d / span %d", row, spanRows),
		"grid-column": fmt.Sprintf(" %d", 3),
		"max-height":  fmt.Sprintf(" %drem", 3*spanRows),
	}
}

func meridian(h24 int) string {
	if h24 > 12 {
		return "PM"
	} else {
		return "AM"
	}
}

css taskBarClass() {
	border-radius: var(--radius-xl);
	display: flex;
	flex-direction: row;
	column-gap: calc(var(--spacing) * 2);
}

css timeClass() {
	grid-column-start: 1;
	grid-row: span 4;
	font-variant-numeric: tabular-nums;
	padding: 3px 5px;
	border-width: 1px 1px 0 0;
	border-style: solid;
	border-color: lightgray;
	font-size: var(--text-xs);
	user-select: none;
	cursor: default;
	text-align: center;
}

css tickClass() {
	grid-column-start: 2;
	border-top: 1px solid lightgray;
	min-height: 2em;
}

css slotClass() {
	grid-column-start: 3;
	user-select: none;
	font-size: var(--text-xs);
	font-variant-numeric: tabular-nums;
}

templ TimelineView(weekday time.Weekday, tasks []model.Task, projects model.ProjectIndex) {
	@components.DayOfWeekSelector(time.Monday, weekday)
	@timeline(tasks, projects)
}

templ timeline(tasks []model.Task, projects model.ProjectIndex) {
	<div
		id="timeline"
		class="w-full lg:w-1/2 max-h-[calc(100%-50px)] overflow-y-scroll"
		style="scrollbar-width: none;"
		hx-swap-oob="true"
		hx-ext="drag"
	>
		<div x-sort.ghost="handleDrag" class="w-full grid grid-flow-col-dense grid-rows-52 grid-cols-[40px_10px_1fr]" style="column-gap: calc(var(--spacing) * 2)">
			for h24 := startHours; h24 < endHours; h24++ {
				{{
                    h := h24
                    if h24 > 12 {
                        h = h24 - 12
                    }
				}}
				<span id={ fmt.Sprintf("tick-%d", h24) } class={ timeClass() }>{ fmt.Sprintf("%02d %s", h, meridian(h24)) }</span>
				for m := 0; m < 60; m += slotMinutes {
					{{ s := ((h24 - startHours) * (60 / slotMinutes)) + (m / slotMinutes) }}
					<span
						id={ fmt.Sprintf("tick-%d-%d", h24, m) }
						x-data={ fmt.Sprintf("{hour: %d, minute: %d, slot: %d}", h, m, s) }
						class={ "tick", tickClass() }
					></span>
					<span id={ fmt.Sprintf("slot-%d-%d", h24, m) } class={ slotClass() }>
						// { fmt.Sprintf("%d:%d", h24, m) }
					</span>
				}
			}
			for _, task := range tasks {
				@timelineTaskCard(task, projects)
			}
		</div>
	</div>
}

templ timelineTaskCard(task model.Task, projects model.ProjectIndex) {
	{{
        project := projects[task.ProjectID.String]
        color := strings.ToLower(project.Color.String())
        position := taskPosition(task)
	}}
    // Use a DaisyUI stack component for tasks at the same time
	<div
		id={ fmt.Sprintf("task-bar-%s", task.ID) }
		hx-drag={ fmt.Sprintf("{ taskId: 'task-bar-%s' }", task.ID) }
		class={ taskBarClass(),
            fmt.Sprintf("bg-%s-50", color),
            fmt.Sprintf("dark:bg-%s-900", color),
            fmt.Sprintf("border-%s-100", color),
            "border", "shadow-sm", "text-sm" 
        }
		style={ position }
	>
		<div
			class={
				"cursor-pointer", "tooltip", "tooltip-top", "h-full", "p-2", "rounded-s-xl",
				fmt.Sprintf("bg-%s-200", color), fmt.Sprintf("text-%s-800", color),
			}
			data-tip={ project.Name }
		>
			@components.Icon(project.Icon, 16)
		</div>
		<div class="p-2">
			{ task.Title.String }
			<span class="italic">{ fmt.Sprintf("%02d:%02d", task.StartTime.Time.Hour(), task.StartTime.Time.Minute()) }</span>
		</div>
	</div>
}
