package tasklist

import (
	"time"
    "strings"
    "fmt"

	"github.com/pleimann/camel-do/model"
	"github.com/pleimann/camel-do/utils"
	"github.com/pleimann/camel-do/templates/components"
)

func taskCardSize(task model.Task) map[string]string {
    return map[string]string{
        // "height": fmt.Sprintf("%.1frem", float32(task.Position.Size) * 2.5),
    }
}

templ TasklistView(weekday time.Weekday, tasks *model.TaskList, projects *model.ProjectIndex) {
    <div class={ "w-full", "xl:w-1/2" } hx-swap-oob="true">
        @components.DayOfWeekSelector(time.Monday, weekday)
        @taskList(tasks, projects)
    </div>
}

templ taskList(tasks *model.TaskList, projects *model.ProjectIndex) {
    <div class={ "h-[calc(100%-50px)]", "max-h-[calc(100%-50px)]", "overflow-y-scroll" }>
        <ul id="tasklist" class="list gap-4 w-full" style="scrollbar-width: none;">
            for task := range tasks.All() {
                @TaskView(task, projects)
            }
        </ul>
    </div>
}

templ TaskView(task model.Task, projects *model.ProjectIndex) {
    {{
        project := projects.Get(task.ProjectID.String)
        color := strings.ToLower(project.Color.String())
    }}
    <li id={ fmt.Sprintf("task-bar-%s", task.ID) }
        class="list-row border-2 border-base-200 bg-base-100 shadow-sm grid-rows-[min-content_1fr]"
        style={ taskCardSize(task) }
        hx-swap-oob="outerHTML beforeend:#tasklist"
    >
        <div class={ "cursor-pointer", "row-span-2", "flex", "flex-col", "items-center", "gap-2", fmt.Sprintf("text-%s-800", color) }>
            <span class="tooltip tooltip-right" data-tip={ project.Name }>@components.Icon(project.Icon, 10)</span>
            <button
                class="btn btn-circle btn-ghost tooltip tooltip-right"
                data-tip="⬅︎ Backlog"
                aria-label="Move task to backlog"
                hx-del={ fmt.Sprintf("/tasks/schedule/%s", task.ID) }
                hx-target="closest .list-row"
                hx-swap="delete"
            >
                <i data-lucide="unschedule" class="size-6"></i>
            </button>
            <button
                class="btn btn-circle btn-ghost tooltip tooltip-right"
                data-tip="Complete"
                hx-put={ fmt.Sprintf("/tasks/%s/complete", task.ID) }
                hx-target="closest .list-row"
                hx-swap="outerHTML"
            >
                if task.Completed.Bool {
                    <i data-lucide="circle-checked" class="size-6"></i>
                } else {
                    <i data-lucide="circle" class="size-6"></i>
                }
            </button>
        </div>
        <div class="list-col-grow">
            <time class="text-xs">{ utils.FormatTime(task.StartTime.Time) }</time>
            <h3 class="uppercase font-semibold text-md">{ task.Title.String }</h3>
        </div>
        <p class="list-col-wrap self-stretch text-xs">{ task.Description.String }</p>
        <div class="text-3xl font-thin opacity-30 tabular-nums oldstyle-nums">
            { utils.FormatDuration(task.Duration.Int32) }
        </div>
    </li>
}
